name: VSCAN-API CI
permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - '.github/**'

jobs:

  build:
    runs-on: ubuntu-latest
    env:
      SERVICE_NAME: vscan-api

    steps:
      - uses: actions/checkout@v2
      - name: Set JDK
        uses: actions/setup-java@v1
        with:
          java-version: '21.0.3'
          architecture: x64

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build and Test
        run: ./gradlew clean build

      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-central-1
          role-to-assume: arn:aws:iam::992382656299:role/github-actions-AntonSalnikov-VSCANER-API

      - name: Login to Amazon ECR
        if: github.ref == 'refs/heads/main'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Extract branch name
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Create Short Hash
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: echo "##[set-output name=hash;]$(echo ${GITHUB_SHA} | cut -c1-8)"
        id: short-hash-create

      - name: Create Image Tag
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: echo "::set-output name=image-tag::${{ steps.extract_branch.outputs.branch }}_${{ github.run_number }}_${{ steps.short-hash-create.outputs.hash }}"
        id: image-tag-create

      - name: Display structure of downloaded files
        run: ls -R

      - name: Build, tag, and push image to Amazon ECR
        if: github.ref == 'refs/heads/main'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.SERVICE_NAME }}
          IMAGE_TAG: ${{ steps.image-tag-create.outputs.image-tag }}
        run: |
          echo creating image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          ls -la
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Download task definition
        if: github.ref == 'refs/heads/main'
        run: |
          aws ecs describe-task-definition --task-definition document-handler-service --query taskDefinition > task-definition.json

      - name: Render Amazon ECS task definition
        if: github.ref == 'refs/heads/main'
        id: render-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.SERVICE_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.SERVICE_NAME }}:${{ steps.image-tag-create.outputs.image-tag }}

      - name: Deploy to ENV
        if: github.ref == 'refs/heads/main'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-container.outputs.task-definition }}
          service: ${{ env.SERVICE_NAME }}
          cluster: "vscan-api-cluster"
          wait-for-service-stability: true